{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"jaxcapse","text":"<p>Fast, differentiable CMB power spectrum emulation in JAX</p>"},{"location":"#overview","title":"Overview","text":"<p>jaxcapse is a JAX implementation of the <code>Capse.jl</code> (CMB Angular Power Spectrum Emulator) neural network emulator for computing CMB power spectra. It provides:</p> <ul> <li>\u26a1 Fast inference: Compute CMB power spectra in microseconds</li> <li>\ud83c\udfaf High accuracy: Sub-percent precision across a wide parameter range</li> <li>\ud83d\udd04 Automatic differentiation: Compute gradients/jacobians with respect to cosmological parameters</li> <li>\ud83d\ude80 Batch processing: Efficiently process multiple parameter sets simultaneously</li> <li>\ud83d\udd27 JAX integration: Full compatibility with JAX transformations (JIT, vmap, grad)</li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#speed","title":"Speed","text":"<p>jaxcapse computes CMB power spectra orders of magnitude faster than traditional Boltzmann solvers:</p> <ul> <li>Single evaluation: ~50 \u03bcs</li> <li>Gradient computation: ~400 \u03bcs</li> <li>Batch of 1000: ~10 ms</li> </ul>"},{"location":"#differentiability","title":"Differentiability","text":"<p>Leverage JAX's automatic differentiation for:</p> <ul> <li>Parameter estimation</li> <li>Fisher matrix computation</li> <li>Sensitivity analysis</li> <li>Gradient-based optimization</li> </ul>"},{"location":"#supported-spectra","title":"Supported Spectra","text":"<p>jaxcapse provides trained emulators for:</p> <ul> <li>TT: Temperature-Temperature</li> <li>EE: E-mode polarization</li> <li>TE: Temperature-E-mode cross-correlation</li> <li>PP: Lensing potential</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import jaxcapse\nimport jax.numpy as jnp\n\n# Load a trained emulator\nemulator_TT = jaxcapse.load_emulator(\"trained_emu/TT/\")\n\n# Define cosmological parameters\n# [ln10As, ns, H0, \u03c9b, \u03c9c, \u03c4]\nparams = jnp.array([3.1, 0.96, 67.0, 0.022, 0.12, 0.055])\n\n# Compute power spectrum\ncl_TT = emulator_TT.get_Cl(params)\n\n# Compute jacobians\nimport jax\njacobian = jax.jacfwd(emulator_TT.get_Cl)(params)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install jaxcapse\n</code></pre> <p>Or install from source:</p> <pre><code>git clone https://github.com/CosmologicalEmulators/jaxcapse.git\ncd jaxcapse\npip install -e .\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>API Reference: Complete API documentation</li> <li>Contributing: Contributing guidelines</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python \u2265 3.10</li> <li>JAX \u2265 0.4.30</li> <li>Flax \u2265 0.10.0</li> <li>jaxace \u2265 0.1.1</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>If you use jaxcapse in your research, please cite:</p> <pre><code>@article{Bonici2024Capse,\n    author = {Bonici, Marco and Bianchini, Federico and Ruiz-Zapatero, Jaime},\n    journal = {The Open Journal of Astrophysics},\n    doi = {10.21105/astro.2307.14339},\n    year = {2024},\n    month = {jan 30},\n    publisher = {Maynooth Academic Publishing},\n    title = {Capse.jl: efficient and auto-differentiable {CMB} power spectra emulation},\n    volume = {7},\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>jaxcapse is released under the MIT License. See LICENSE for details.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>jaxcapse builds on:</p> <ul> <li>jaxace: JAX implementation of AbstractCosmologicalEmulators.jl</li> <li>Capse.jl: Original Julia implementation</li> <li>JAX: Composable transformations of Python+NumPy programs</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#core-module","title":"Core Module","text":""},{"location":"api/#jaxcapse.jaxcapse","title":"jaxcapse.jaxcapse","text":""},{"location":"api/#jaxcapse.jaxcapse.MLP","title":"MLP","text":"<pre><code>MLP(emulator: FlaxEmulator, in_MinMax: ndarray, out_MinMax: ndarray, postprocessing: callable, emulator_description: Dict[str, Any])\n</code></pre> <p>CAPSE MLP emulator using jaxace infrastructure.</p> <p>This class wraps a jaxace FlaxEmulator with CAPSE-specific functionality for CMB power spectrum computation.</p> <p>Initialize MLP with jaxace emulator and CAPSE-specific components.</p> <p>Parameters:</p> Name Type Description Default <code>emulator</code> <code>FlaxEmulator</code> <p>jaxace FlaxEmulator instance</p> required <code>in_MinMax</code> <code>ndarray</code> <p>Input normalization parameters</p> required <code>out_MinMax</code> <code>ndarray</code> <p>Output normalization parameters</p> required <code>postprocessing</code> <code>callable</code> <p>Postprocessing function (must be JAX-compatible)</p> required <code>emulator_description</code> <code>Dict[str, Any]</code> <p>Emulator metadata</p> required"},{"location":"api/#jaxcapse.jaxcapse.MLP.get_Cl","title":"get_Cl","text":"<pre><code>get_Cl(input_data: ndarray) -&gt; jnp.ndarray\n</code></pre> <p>Compute CMB power spectrum Cl values with JIT compilation.</p> <p>Parameters:</p> Name Type Description Default <code>input_data</code> <code>ndarray</code> <p>Cosmological parameters as JAX array</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Processed Cl values</p>"},{"location":"api/#jaxcapse.jaxcapse.MLP.get_Cl_batch","title":"get_Cl_batch","text":"<pre><code>get_Cl_batch(input_batch: ndarray) -&gt; np.ndarray\n</code></pre> <p>Compute CMB power spectrum Cl values for a batch of inputs using vectorization.</p> <p>Parameters:</p> Name Type Description Default <code>input_batch</code> <code>ndarray</code> <p>Array of cosmological parameters, shape (n_samples, n_params)</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Array of processed Cl values, shape (n_samples, n_cls)</p>"},{"location":"api/#jaxcapse.jaxcapse.load_emulator","title":"load_emulator","text":"<pre><code>load_emulator(folder_path: str) -&gt; MLP\n</code></pre> <p>Load a CAPSE emulator using jaxace infrastructure.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>str</code> <p>Path to the emulator folder containing: - nn_setup.json: Neural network specification - weights.npy: Trained weights - inminmax.npy: Input normalization parameters - outminmax.npy: Output normalization parameters - postprocessing.py: Postprocessing function</p> required <p>Returns:</p> Type Description <code>MLP</code> <p>MLP instance ready for inference</p>"},{"location":"api/#jaxcapse.jaxcapse.load_preprocessing","title":"load_preprocessing","text":"<pre><code>load_preprocessing(root_path: str, filename: str) -&gt; callable\n</code></pre> <p>Load postprocessing function from Python file.</p> <p>Parameters:</p> Name Type Description Default <code>root_path</code> <code>str</code> <p>Directory containing the postprocessing file</p> required <code>filename</code> <code>str</code> <p>Name of the postprocessing file (without .py extension)</p> required <p>Returns:</p> Type Description <code>callable</code> <p>The postprocessing function</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to jaxcapse! This document provides guidelines for contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository</li> <li>Clone your fork: <code>git clone https://github.com/yourusername/jaxcapse.git</code></li> <li>Install in development mode: <code>pip install -e \".[dev]\"</code></li> <li>Create a new branch: <code>git checkout -b feature-name</code></li> </ol>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Run tests before submitting: <pre><code>pytest tests/\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Build documentation locally: <pre><code>mkdocs build\nmkdocs serve  # Preview at http://localhost:8000\n</code></pre></p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure all tests pass</li> <li>Update documentation if needed</li> <li>Add tests for new functionality</li> <li>Submit pull request to <code>develop</code> branch</li> </ol>"}]}